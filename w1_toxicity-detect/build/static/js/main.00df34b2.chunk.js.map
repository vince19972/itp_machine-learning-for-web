{"version":3,"sources":["helpers/ToxicDetect.js","helpers/Loader.js","components/MainTextarea/index.jsx","components/Board/index.jsx","App.js","serviceWorker.js","index.js"],"names":["toxicDetect","loadModel","toxicity","classify","text","model","predict","predictions","loader","rootElement","document","getElementById","on","classList","add","off","remove","_","require","MainTextarea","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","input","mainColor","handleChange","bind","assertThisInitialized","loadTf","handlePredictResult","debounce","event","setState","target","value","_this2","then","result","results","_result$probabilities","slicedToArray","probabilities","trueProbability","concat","react_default","a","createElement","className","onChange","style","backgroundColor","Component","Board","components_MainTextarea","App","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gXAEMA,EAAc,GAKpBA,EAAYC,UAAY,kBAAMC,IAFZ,KAGlBF,EAAYG,SAAW,SAACC,GAAD,OAAU,SAACC,GAAD,OAAWA,EAAMF,SAASC,KAC3DJ,EAAYM,QAAU,SAACC,GAAD,OAAiBA,GAExBP,QCXTQ,EAAS,GACTC,EAAcC,SAASC,eAAe,QAG5CH,EAAOI,GAAK,WACXH,EAAYI,UAAUC,IAHL,gBAMlBN,EAAOO,IAAM,WACZN,EAAYI,UAAUG,OAPL,gBAUHR,QCNTS,EAAKC,EAAQ,KA4DJC,cAzDd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACZC,MAAO,GACPC,UAAW,sBAGZT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACpBA,EAAKa,OAASb,EAAKa,OAAOF,KAAZV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACdA,EAAKc,oBAAsBd,EAAKc,oBAAoBH,KAAzBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAG3BA,EAAKa,OAASjB,EAAEmB,SAASf,EAAKa,OAAQ,KAbpBb,4EAgBNgB,GACZb,KAAKc,SAAS,CAAET,MAAOQ,EAAME,OAAOC,QACpChB,KAAKU,0CAGG,IAAAO,EAAAjB,KACRhB,EAAOI,KACPZ,EAAYC,YACVyC,KAAK,SAAArC,GACLL,EACEG,SAASsC,EAAKb,MAAMC,MADtB7B,CAC6BK,GAC1BqC,KAAK,SAAAnC,GACLkC,EAAKN,oBAAoBnC,EAAYM,QAAQC,IAC7CC,EAAOO,sDAKOR,GAEnB,IAAMoC,EAASpC,EAAY,GAAGqC,QAAQ,GAFNC,EAAAvB,OAAAwB,EAAA,EAAAxB,CAGYqB,EAAOI,cAHnB,GAGPC,GAHOH,EAAA,GAAAA,EAAA,IAKhCrB,KAAKc,SAAS,CACbR,UAAS,iBAAAmB,OAAmBD,EAAkB,IAArC,wCAKV,OACCE,EAAAC,EAAAC,cAAA,YACCC,UAAU,gBACVb,MAAOhB,KAAKI,MAAMC,MAClByB,SAAU9B,KAAKO,aACfwB,MAAO,CAAEC,gBAAiBhC,KAAKI,MAAME,oBAnDd2B,aCSZC,mLATb,OACCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAACO,EAAD,cALgBF,aCULG,mLARX,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACS,EAAD,cAJUJ,aCOEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAAS3D,SAASC,eAAe,SD2H3C,kBAAmB2D,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.00df34b2.chunk.js","sourcesContent":["import * as toxicity from '@tensorflow-models/toxicity'\n\nconst toxicDetect = {}\n\n// The minimum prediction confidence.\nconst threshold = 0.9\n\ntoxicDetect.loadModel = () => toxicity.load(threshold)\ntoxicDetect.classify = (text) => (model) => model.classify(text)\ntoxicDetect.predict = (predictions) => predictions\n\nexport default toxicDetect","const loader = {}\nconst rootElement = document.getElementById('root')\nconst styleFlag = '-is-loading'\n\nloader.on = () => {\n\trootElement.classList.add(styleFlag)\n}\n\nloader.off = () => {\n\trootElement.classList.remove(styleFlag)\n}\n\nexport default loader","import React, { Component } from 'react'\nimport './MainTextarea.css'\n\nimport toxicDetect from '../../helpers/ToxicDetect'\nimport loader from '../../helpers/Loader'\n\nconst _  = require('underscore')\n\nclass MainTextarea extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\tinput: '',\n\t\t\tmainColor: 'rgba(180, 0, 0, 0)'\n\t\t}\n\n\t\tthis.handleChange = this.handleChange.bind(this)\n\t\tthis.loadTf = this.loadTf.bind(this)\n\t\tthis.handlePredictResult = this.handlePredictResult.bind(this)\n\n\t\t// debounce\n\t\tthis.loadTf = _.debounce(this.loadTf, 1000)\n\t}\n\n\thandleChange(event) {\n\t\tthis.setState({ input: event.target.value })\n\t\tthis.loadTf()\n\t}\n\n\tloadTf() {\n\t\tloader.on()\n\t\ttoxicDetect.loadModel()\n\t\t\t.then(model => {\n\t\t\t\ttoxicDetect\n\t\t\t\t\t.classify(this.state.input)(model)\n\t\t\t\t\t\t.then(predictions => {\n\t\t\t\t\t\t\tthis.handlePredictResult(toxicDetect.predict(predictions))\n\t\t\t\t\t\t\tloader.off()\n\t\t\t\t\t\t})\n\t\t\t})\n\t}\n\n\thandlePredictResult(predictions) {\n\t\t// get toxicity result\n\t\tconst result = predictions[6].results[0]\n\t\tconst [falseProbability, trueProbability] = result.probabilities\n\n\t\tthis.setState({\n\t\t\tmainColor: `rgba(0, 0, 0, ${trueProbability + 0.05})`,\n\t\t})\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<textarea\n\t\t\t\tclassName=\"main-textarea\"\n\t\t\t\tvalue={this.state.input}\n\t\t\t\tonChange={this.handleChange}\n\t\t\t\tstyle={{ backgroundColor: this.state.mainColor }}\n\t\t\t/>\n\t\t)\n\t}\n\n}\n\nexport default MainTextarea","import React, { Component } from 'react'\nimport './Board.css'\n\nimport MainTextarea from '../MainTextarea'\n\nclass Board extends Component {\n\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"board\">\n\t\t\t\t<MainTextarea/>\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\nexport default Board","import React, { Component } from 'react';\nimport './App.css';\n\nimport Board from './components/Board'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}