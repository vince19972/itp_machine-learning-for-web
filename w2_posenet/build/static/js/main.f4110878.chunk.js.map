{"version":3,"sources":["utilities/Canvas.js","utilities/DeviceDetect.js","utilities/Camera.js","components/MainCanvas/index.jsx","App.js","serviceWorker.js","index.js"],"names":["minPoseConfidence","minPartConfidence","drawPoint","ctx","y","x","r","grd","createLinearGradient","addColorStop","beginPath","arc","Math","PI","fillStyle","fill","repaint","video","pose","ctxObj","canvasWidth","canvasHeight","clearRect","save","scale","translate","drawImage","restore","score","keypoints","minConfidence","arguments","length","undefined","i","keypoint","_keypoint$position","position","drawKeypoints","isMobile","test","navigator","userAgent","window","innerWidth","innerHeight","setupCamera","_x","_setupCamera","apply","this","_callee","videoElement","mobile","stream","regenerator_default","a","wrap","_context","prev","next","mediaDevices","getUserMedia","Error","width","height","audio","facingMode","sent","srcObject","abrupt","Promise","resolve","onloadedmetadata","stop","loadVideo","_loadVideo","_callee2","_context2","document","getElementById","play","MainCanvas","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","input","mainColor","bindPage","bind","assertThisInitialized","poseDetection","net","estimateSinglePose","then","requestAnimationFrame","posenet","canvas","getContext","react_default","createElement","id","Component","App","className","components_MainCanvas","Boolean","location","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4110878.chunk.js","sourcesContent":["const minPoseConfidence = 0.1\nconst minPartConfidence = 0.5\n\nexport function drawPoint(ctx, y, x, r) {\n\tconst grd = ctx.createLinearGradient(x, y, x+r, y)\n\tgrd.addColorStop(0, \"red\")\n\tgrd.addColorStop(1, \"darkred\")\n\n  ctx.beginPath()\n  ctx.arc(x, y, r, 0, 2 * Math.PI)\n  ctx.fillStyle = grd\n  ctx.fill()\n}\n\nexport function drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\n\n  for (let i = 0; i < keypoints.length; i++) {\n    const keypoint = keypoints[i]\n\n    if (keypoint.score < minConfidence) {\n      continue\n    }\n\n    const {y, x} = keypoint.position\n    drawPoint(ctx, y * scale, x * scale, 110)\n  }\n}\n\nexport function repaint(video, pose, ctxObj) {\n  const { ctx, canvasWidth, canvasHeight } = ctxObj\n\tctx.clearRect(0, 0, canvasWidth, canvasHeight)\n\tctx.save()\n\tctx.scale(-1, 1)\n\tctx.translate(-canvasWidth, 0)\n\tctx.drawImage(video, 0, 0, canvasWidth, canvasHeight)\n\tctx.restore()\n\n\t// isPalmsMeet(pose)\n\n\tif (pose.score >= minPoseConfidence) {\n\t\tdrawKeypoints(pose.keypoints, minPartConfidence, ctx)\n\t}\n}\n","export function isAndroid() {\n  return /Android/i.test(navigator.userAgent)\n}\n\nexport function isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent)\n}\n\nexport default function isMobile() {\n  return isAndroid() || isiOS()\n}","/**\n *\n * The code is revised from https://github.com/tensorflow/tfjs-models/tree/master/posenet/demos\n *\n*/\n\nimport isMobile from './DeviceDetect'\n\nconst canvasWidth = window.innerWidth / 2.5\nconst canvasHeight = window.innerHeight / 2\n\nexport async function setupCamera(videoElement) {\n  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n    throw new Error(\n        'Browser API navigator.mediaDevices.getUserMedia not available')\n  }\n\n  videoElement.width = canvasWidth\n  videoElement.height = canvasHeight\n\n  const mobile = isMobile()\n  const stream = await navigator.mediaDevices.getUserMedia({\n    'audio': false,\n    'video': {\n      facingMode: 'user',\n      width: mobile ? undefined : canvasWidth,\n      height: mobile ? undefined : canvasHeight,\n    },\n  })\n  videoElement.srcObject = stream\n\n  return new Promise((resolve) => {\n    videoElement.onloadedmetadata = () => {\n      resolve(videoElement)\n    }\n  })\n}\n\nexport default async function loadVideo() {\n\tconst videoElement = document.getElementById('video')\n\tconst video = await setupCamera(videoElement)\n  video.play()\n\n  return video\n}","import React, { Component } from 'react'\nimport './MainCanvas.css'\n\nimport * as posenet from '@tensorflow-models/posenet'\nimport { repaint } from '../../utilities/Canvas'\nimport loadVideo from '../../utilities/Camera'\n\nclass MainCanvas extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\tinput: '',\n\t\t\tmainColor: 'rgba(180, 0, 0, 0)'\n\t\t}\n\n\t\tthis.bindPage = this.bindPage.bind(this)\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.bindPage()\n\t}\n\n\tasync bindPage() {\n\n\t\tlet video\n\n\t\ttry {\n\t\t\tvideo = await loadVideo()\n\t\t} catch (e) {\n\t\t\tthrow e\n\t\t}\n\n\t\tconst net = await posenet.load(0.75)\n\t\tconst canvas = document.getElementById('output')\n\t\tconst ctx = canvas.getContext('2d')\n\t\tconst canvasWidth = window.innerWidth / 2.5\n\t\tconst canvasHeight = window.innerHeight / 2\n\t\tcanvas.width = canvasWidth\n\t\tcanvas.height = canvasHeight\n\n\t\tasync function poseDetection() {\n\t\t\tconst flipHorizontal = true\n\t\t\tconst imageScaleFactor = 0.5\n\t\t\tconst outputStride = 16\n\n\t\t\tconst pose = net.estimateSinglePose(video, imageScaleFactor, flipHorizontal, outputStride)\n\t\t\tpose.then((pose) => repaint(video, pose, {\n\t\t\t\tctx,\n\t\t\t\tcanvasWidth,\n\t\t\t\tcanvasHeight\n\t\t\t}))\n\n\t\t\trequestAnimationFrame(poseDetection)\n\t\t}\n\n\t\tposeDetection()\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div id='main'>\n\t\t\t\t<video id=\"video\"></video>\n\t\t\t\t<canvas id=\"output\" />\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\nexport default MainCanvas","import React, { Component } from 'react'\nimport './App.css'\n\nimport MainCanvas from './components/MainCanvas'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MainCanvas />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}